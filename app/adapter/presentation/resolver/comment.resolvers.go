package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/yuorei/video-server/app/domain"
	model "github.com/yuorei/video-server/app/domain/models"
	"github.com/yuorei/video-server/graph/generated"
	"github.com/yuorei/video-server/middleware"
)

// ID is the resolver for the id field.
func (r *commentResolver) ID(ctx context.Context, obj *model.Comment) (string, error) {
	return obj.ID, nil
}

// Video is the resolver for the video field.
func (r *commentResolver) Video(ctx context.Context, obj *model.Comment) (*model.Video, error) {
	video, err := r.usecase.GetVideo(ctx, obj.Video.ID)
	if err != nil {
		return nil, err
	}
	return &model.Video{
		ID:                video.ID,
		VideoURL:          video.VideoURL,
		ThumbnailImageURL: video.ThumbnailImageURL,
		Title:             video.Title,
		Description:       video.Description,
		CreatedAt:         video.CreatedAt.String(),
		UpdatedAt:         video.CreatedAt.String(),
		Uploader: &model.User{
			ID: video.UploaderID,
		},
	}, nil
}

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (*model.User, error) {
	user, err := r.usecase.GetUser(ctx, obj.User.ID)
	if err != nil || user.ID != obj.User.ID {
		return nil, err
	}

	return &model.User{
		ID:                  user.ID,
		Name:                user.Name,
		ProfileImageURL:     user.ProfileImageURL,
		Subscribechannelids: user.Subscribechannelids,
		IsSubscribed:        user.IsSubscribed,
		Role:                model.Role(user.Role),
	}, nil
}

// PostComment is the resolver for the PostComment field.
func (r *mutationResolver) PostComment(ctx context.Context, input model.PostCommentInput) (*model.PostCommentPayload, error) {
	commentID := domain.NewCommentID()
	userID, err := middleware.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}
	name, err := middleware.GetNameFromContext(ctx)
	if err != nil {
		return nil, err
	}

	postComment := domain.NewPostComment(commentID, input.VideoID, userID, name, input.Text)
	postComment, err = r.usecase.PostComment(ctx, postComment)
	if err != nil {
		return nil, err
	}
	return &model.PostCommentPayload{
		ID: postComment.ID,
		Video: &model.Video{
			ID: postComment.VideoID,
		},
		Text:      postComment.Text,
		CreatedAt: postComment.CreatedAt.String(),
		UpdatedAt: postComment.UpdatedAt.String(),
		User: &model.User{
			ID:           postComment.User.ID,
			Name:         postComment.User.Name,
			IsSubscribed: postComment.User.IsSubscribed,
			Role:         model.Role(postComment.User.Role),
		},
	}, nil
}

// Video is the resolver for the video field.
func (r *postCommentPayloadResolver) Video(ctx context.Context, obj *model.PostCommentPayload) (*model.Video, error) {
	video, err := r.usecase.GetVideo(ctx, obj.Video.ID)
	if err != nil {
		return nil, err
	}
	return &model.Video{
		ID:                video.ID,
		VideoURL:          video.VideoURL,
		ThumbnailImageURL: video.ThumbnailImageURL,
		Title:             video.Title,
		Description:       video.Description,
		CreatedAt:         video.CreatedAt.String(),
		UpdatedAt:         video.CreatedAt.String(),
		Uploader: &model.User{
			ID: video.UploaderID,
		},
	}, nil
}

// User is the resolver for the user field.
func (r *postCommentPayloadResolver) User(ctx context.Context, obj *model.PostCommentPayload) (*model.User, error) {
	user, err := r.usecase.GetUser(ctx, obj.User.ID)
	if err != nil || user.ID != obj.User.ID {
		return nil, err
	}

	return &model.User{
		ID:                  user.ID,
		Name:                user.Name,
		ProfileImageURL:     user.ProfileImageURL,
		Subscribechannelids: user.Subscribechannelids,
		IsSubscribed:        user.IsSubscribed,
		Role:                model.Role(user.Role),
	}, nil
}

// CommentsByVideo is the resolver for the commentsByVideo field.
func (r *queryResolver) CommentsByVideo(ctx context.Context, videoID string) ([]*model.Comment, error) {
	comments, err := r.usecase.GetCommentsByVideoID(ctx, videoID)
	if err != nil {
		return nil, err
	}

	var result []*model.Comment
	for _, comment := range comments {
		result = append(result, &model.Comment{
			ID:        comment.ID,
			Video:     &model.Video{ID: comment.VideoID},
			Text:      comment.Text,
			CreatedAt: comment.CreatedAt.String(),
			UpdatedAt: comment.UpdatedAt.String(),
			User: &model.User{
				ID:   comment.User.ID,
				Name: comment.User.Name,
			},
		})
	}

	return result, nil
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// PostCommentPayload returns generated.PostCommentPayloadResolver implementation.
func (r *Resolver) PostCommentPayload() generated.PostCommentPayloadResolver {
	return &postCommentPayloadResolver{r}
}

type commentResolver struct{ *Resolver }
type postCommentPayloadResolver struct{ *Resolver }
