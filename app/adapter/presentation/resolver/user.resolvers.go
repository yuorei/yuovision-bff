package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/yuorei/video-server/app/domain"
	model "github.com/yuorei/video-server/app/domain/models"
	"github.com/yuorei/video-server/graph/generated"
	"github.com/yuorei/video-server/lib"
	"github.com/yuorei/video-server/middleware"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.UserInput) (*model.UserPayload, error) {
	user, err := r.usecase.RegisterUser(ctx)
	if err != nil {
		return nil, err
	}

	return &model.UserPayload{
		ID:                  user.ID,
		Name:                user.Name,
		ProfileImageURL:     user.ProfileImageURL,
		Subscribechannelids: user.Subscribechannelids,
		IsSubscribed:        user.IsSubscribed,
		Role:                model.Role(user.Role),
	}, nil
}

// SubscribeChannel is the resolver for the subscribeChannel field.
func (r *mutationResolver) SubscribeChannel(ctx context.Context, input *model.SubscribeChannelInput) (*model.SubscriptionPayload, error) {
	id, err := middleware.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	subscribeChannel := domain.NewSubscribeChannel(id, input.ChannelID)
	subscribeChannelResult, err := r.usecase.SubscribeChannel(ctx, subscribeChannel)
	if err != nil {
		return nil, err
	}

	return &model.SubscriptionPayload{
		IsSuccess: subscribeChannelResult.IsSuccess,
	}, nil
}

// UnSubscribeChannel is the resolver for the unSubscribeChannel field.
func (r *mutationResolver) UnSubscribeChannel(ctx context.Context, input *model.SubscribeChannelInput) (*model.SubscriptionPayload, error) {
	id, err := middleware.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	subscribeChannel := domain.NewSubscribeChannel(id, input.ChannelID)
	subscribeChannelResult, err := r.usecase.UnSubscribeChannel(ctx, subscribeChannel)
	if err != nil {
		return nil, err
	}

	return &model.SubscriptionPayload{
		IsSuccess: subscribeChannelResult.IsSuccess,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.usecase.GetUser(ctx, id)
	if err != nil || user.ID != id {
		return nil, err
	}

	return &model.User{
		ID:                  user.ID,
		Name:                user.Name,
		ProfileImageURL:     user.ProfileImageURL,
		Subscribechannelids: user.Subscribechannelids,
		IsSubscribed:        user.IsSubscribed,
		Role:                model.Role(user.Role),
	}, nil
}

// UserByAuth is the resolver for the userByAuth field.
func (r *queryResolver) UserByAuth(ctx context.Context) (*model.User, error) {
	id, err := middleware.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.usecase.GetUser(ctx, id)
	if err != nil || user.ID != id {
		return nil, err
	}

	return &model.User{
		ID:                  user.ID,
		Name:                user.Name,
		ProfileImageURL:     user.ProfileImageURL,
		Subscribechannelids: user.Subscribechannelids,
		IsSubscribed:        user.IsSubscribed,
		Role:                model.Role(user.Role),
	}, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	return obj.ID, nil
}

// Videos is the resolver for the Videos field.
func (r *userResolver) Videos(ctx context.Context, obj *model.User) ([]*model.Video, error) {
	videos, err := r.usecase.GetVideosByUserID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var result []*model.Video
	for _, video := range videos {
		result = append(result, &model.Video{
			ID:                video.ID,
			VideoURL:          video.VideoURL,
			ThumbnailImageURL: video.ThumbnailImageURL,
			Title:             video.Title,
			Description:       video.Description,
			Tags:              lib.StringsToPointers(video.Tags),
			IsPrivate:         video.IsPrivate,
			IsAdult:           video.IsAdult,
			IsExternalCutout:  video.IsExternalCutout,
			IsAd:              video.IsAd,
			CreatedAt:         video.CreatedAt.String(),
			UpdatedAt:         video.CreatedAt.String(),
			Uploader: &model.User{
				ID: video.UploaderID,
			},
		})
	}
	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
